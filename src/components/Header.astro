---
import ThemeToggle from "./ThemeToggle.astro";
import LanguageToggle from "./LanguageToggle.astro";
import translationsES from "../../local/es.json";
import translationsEN from "../../local/en.json";

type NavLabel =
	| "experiencia"
	| "proyectos"
	| "education"
	| "sobreMi"
	| "contacto";

const navItems: { title: string; label: NavLabel; url: string }[] = [
	{ title: "Proyectos", label: "proyectos", url: "#projects" },
	{ title: "Formación", label: "education", url: "#education" },
	{ title: "Sobre mí", label: "sobreMi", url: "#aboutMe" },
	{ title: "Contacto", label: "contacto", url: "mailto:..." },
];

const { lang = "es" } = Astro.props;
const t = lang === "en" ? translationsEN : translationsES;
---

<header class="fixed top-0 left-0 right-0 z-10">
	<!-- Contenedor centrado en escritorio y full width en móvil -->
	<div class="relative max-w-md w-full mx-auto bg-transparent">
		<!-- Versión Desktop: visible en pantallas >425px -->
		<nav
			class="hidden sm:flex items-center gap-3 px-4 py-2 mt-1 rounded-full shadow-md
             backdrop-blur-md bg-white/80 dark:bg-gray-900/70 text-sm font-medium
             text-gray-700 dark:text-gray-200"
		>
			{
				navItems.map((item) => (
					<a
						href={item.url}
						class="px-2 transition hover:text-teal-600 dark:hover:text-emerald-400"
					>
						{t.header.nav[item.label]}
					</a>
				))
			}
			<div
				class="flex items-center gap-2 pl-2 border-l border-gray-300 dark:border-gray-600"
			>
				<ThemeToggle />
				<LanguageToggle lang={lang} />
			</div>
		</nav>

		<!-- Versión Mobile: visible en pantallas ≤425px -->
		<nav
			class="flex sm:hidden items-center justify-between px-4 py-2
             bg-white/80 dark:bg-gray-900/70 shadow-md backdrop-blur-md"
		>
			<!-- Botón hamburguesa -->
			<button
				id="mobile-menu-button"
				class="btn btn-square btn-ghost"
				aria-label="Abrir menú"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					class="inline-block w-6 h-6 stroke-current"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M4 6h16M4 12h16M4 18h16"></path>
				</svg>
			</button>
			<!-- Nombre -->
			<span class="text-xl font-bold">Lucian Andrei</span>
			<!-- Espacio vacío para balancear -->
			<div class="w-6"></div>
		</nav>

		<!-- Panel desplegable Mobile (inicialmente oculto) -->
		<div
			id="mobile-dropdown"
			class="hidden absolute top-full left-0 w-full bg-white/80 dark:bg-gray-900/70
             shadow-md backdrop-blur-md"
		>
			<div class="p-4">
				<ul id="mobile-menu-list" class="flex flex-col gap-2">
					{
						navItems.map((item) => (
							<li>
								<a
									href={item.url}
									class="block px-2 py-1 rounded transition hover:bg-gray-100 dark:hover:bg-gray-800"
								>
									{t.header.nav[item.label]}
								</a>
							</li>
						))
					}
				</ul>
				<div
					class="mt-4 flex items-center gap-2 border-t pt-2 border-gray-300 dark:border-gray-600"
				>
					<!-- Solo LanguageToggle en móvil -->
					<LanguageToggle lang={lang} />
				</div>
			</div>
		</div>
	</div>
</header>

<script is:inline>
	function attachMobileMenuEvents() {
		const mobileMenuButton = document.getElementById("mobile-menu-button");
		const mobileDropdown = document.getElementById("mobile-dropdown");
		const mobileMenuList = document.getElementById("mobile-menu-list");

		if (mobileMenuButton && mobileDropdown) {
			mobileMenuButton.addEventListener("click", () => {
				mobileDropdown.classList.toggle("hidden");
			});
		}

		if (mobileMenuList && mobileDropdown) {
			mobileMenuList.addEventListener("click", (e) => {
				if (e.target.tagName.toLowerCase() === "a") {
					mobileDropdown.classList.add("hidden");
				}
			});
		}
	}
	// Adjuntamos los eventos al cargar y después de cada cambio (por ejemplo, al cambiar idioma)
	attachMobileMenuEvents();
	document.addEventListener("astro:after-swap", attachMobileMenuEvents);
</script>
