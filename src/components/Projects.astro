---
import GitHub from "./icons/GitHub.astro";
import NextJS from "./icons/NextJS.astro";
import Tailwind from "./icons/Tailwind.astro";
import Link from "./icons/Link.astro";
import LinkButton from "./LinkButton.astro";
import AWS from "./icons/Aws.astro";
import CSharp from "./icons/CSharp.astro";
import Blazor from "./icons/Blazor.astro";
import SQLite from "./icons/SQLite.astro";

const TAGS = {
	AWS: {
		name: "AWS",
		class: "bg-orange-500 text-white",
		icon: AWS,
	},
	NEXT: {
		name: "Next.js",
		class: "bg-black text-white",
		icon: NextJS,
	},
	TAILWIND: {
		name: "Tailwind CSS",
		class: "bg-[#38B2AC] text-white",
		icon: Tailwind,
	},
	MONGO: {
		name: "MongoDB",
		class: "bg-green-600 text-white",
	},
	CSHARP: {
		name: "C#",
		class: "bg-purple-600 text-white",
		icon: CSharp,
	},
	SQLITE: {
		name: "SQLite",
		class: "bg-sky-700 text-white",
		icon: SQLite,
	},
	BLAZOR: {
		name: "Blazor",
		class: "bg-indigo-600 text-white",
		icon: Blazor,
	},
};

const PROJECTS = [
	{
		title: "myCloudDocs",
		description:
			"Repositorio donde guardo la documentación de diversos proyectos que he ido realizando usando los servicios de AWS",
		link: "",
		github: "https://github.com/Lux-source/myCloudDocs",
		image: "/projects/myCloudDocs.gif",
		tags: [TAGS.AWS],
	},
	{
		title: "Eterna",
		description:
			"Plataforma de e-commerce, para venta de relojes, desarrollada con Next.js, MongoDB y Tailwind CSS, que incluye una REST API segura con autenticación JWT.",
		link: "",
		github: "https://github.com/Lux-source/WES_WatchShop",
		image: "/projects/ecommerceEterna.gif",
		tags: [TAGS.NEXT, TAGS.TAILWIND, TAGS.MONGO],
	},
	{
		title: "Device Management App",
		description:
			"Aplicación Full Stack desarrollada en equipo usando metodologías ágiles (Scrum), C#, Blazor y SQLite. Implementa pruebas unitarias con xUnit y pipelines automatizados de CI/CD en Azure DevOps para despliegues continuos.",
		link: "",
		github:
			"https://dev.azure.com/SE2425TheAvengers/SEIIProject/_git/SEIIProject",
		image: "/projects/appForDevices.gif",
		tags: [TAGS.CSHARP, TAGS.BLAZOR, TAGS.SQLITE],
	},
];
---

<div class="flex flex-col gap-y-16">
	{
		PROJECTS.map(({ image, title, description, tags, link, github }) => (
			<article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
				<div class="w-full md:w-1/2">
					<div class="relative flex flex-col items-center gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
						<img
							alt={title}
							class="object-cover object-top w-full h-56 transition duration-500 md:scale-110 md:group-hover:scale-105"
							loading="lazy"
							src={image}
						/>
					</div>
				</div>
				<div class="w-full md:w-1/2 md:max-w-lg">
					<h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
						{title}
					</h3>
					<div class="flex flex-wrap mt-2">
						<ul class="flex flex-row mb-2 gap-x-2">
							{tags.map((tag) => (
								<li>
									<span
										class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}
									>
										{tag.icon ? <tag.icon class="w-4 h-4" /> : null}
										{tag.name}
									</span>
								</li>
							))}
						</ul>
						<div class="mt-2 text-gray-700 dark:text-gray-400">
							{description}
						</div>
						<footer class="flex items-end justify-start mt-4 gap-x-4">
							{github && (
								<LinkButton href={github}>
									<GitHub class="w-6 h-6" />
									Code
								</LinkButton>
							)}
							{link && (
								<LinkButton href={link}>
									<Link class="w-4 h-4" />
									Preview
								</LinkButton>
							)}
						</footer>
					</div>
				</div>
			</article>
		))
	}
</div>
